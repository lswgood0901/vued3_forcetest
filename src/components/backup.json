<template>
  <div id="app">
  </div>
</template>

<script>
import * as d3 from 'd3' // eslint-disable-line no-unused-vars

export default {
  name: 'App',
  components: {
  },
  data() {
    return {
    svg : null,
    svgMap : null,
    svgmini : null,
    miniMap : null,
    minimapScatter : null,
    width : 300,
    height: 300,
    simulation : null,
    miniSimulation: null,
    newSimulation: null,
    k : 1,
    tx : 0,
    ty :0,
    scatter: null,
    node: [
      {"name":"A",
      "id":"A0",
      x : 20,
      y : 40},
      {"name": "B",
      "id":"B0",
      x : 100,
      y : 100},
      {"name": "C",
      "id":"C0",
      x : 300,
      y : 300},
      {"name": "D",
      "id":"D0",
      x : 250,
      y : 10},
      {"name": "E",
      "id":"E0",
      x : 10,
      y : 300},
      {"name": "E",
      "id":"E0",
      x : 48,
      y : 12},
      {"name": "E",
      "id":"E0",
      x : 48,
      y : 178}
      ],
    deltaY: 0,
    deltaArray:[],
    arrayK : [],
    arrayTx:[],
    arrayTy:[],
    zooms: null,
    brush: null,
    timeStamp : 0,
    ArrayTimeStamp: [0,0],
    i : 0,
    bbox: null,
    arrayBbox: [],
    
    }
  },
  methods: {
    
    isBrushed: (brushCoords, cx, cy)=>{ // eslint-disable-line no-unused-vars
      const x0 = brushCoords[0][0];
      const x1 = brushCoords[1][0];
      const y0 = brushCoords[0][1];
      const y1 = brushCoords[1][1];
      return x0 > cx || cx > x1 || y0 > cy || cy > y1;
    },
    zoomOut: (x,y,k,svg,zoom)=>{
      if(k[k.length-1] < k[k.length-2])
        {
          svg.call(
            zoom.transform,
            d3.zoomIdentity.translate(x[x.length-1], y[y.length-1]).scale(k[k.length-1]))
        } svg.call(
            zoom.transform,
            d3.zoomIdentity.translate(x[x.length-2], y[y.length-2]).scale(k[k.length-2]))
          // .on('mousedown.zoom', null)
    },
    zoomIn: (x,y,k,svg,zoom)=>{
      if(k[k.length-1] > k[k.length-2])
        {
          svg.call(
            zoom.transform,
            d3.zoomIdentity.translate(x[x.length-1], y[y.length-1]).scale(k[k.length-1]))
        } svg.call(
            zoom.transform,
            d3.zoomIdentity.translate(x[x.length-2], y[y.length-2]).scale(k[k.length-2]))
          // .on('mousedown.zoom', null)
    },
    panning: (x,y,k,svg,zoom)=>{
      console.log(k[k.length-1] == k[k.length-2] || (k[0]==1 && k[1]== undefined))
      if(k[k.length-1] == k[k.length-2] || (k[0]==1 && k[1]== undefined))
        {
        svg.call(
          zoom.transform,
          d3.zoomIdentity.translate(x[x.length-1], y[y.length-1]).scale(k[k.length-1]))
          // svg.on('wheel.zoom', (event)=>{
          //   event.preventDefault();
          // })
        } svg.call(
            zoom.transform,
            d3.zoomIdentity.translate(x[x.length-2], y[y.length-2]).scale(k[k.length-2]))
    },
  },
  
  watch: {

    timeStamp(){
      let tFlag = true
      let tTime = setTimeout(()=>{}, 1500)
      this.bbox=d3.select('.miniBbox').node().getBBox()
      this.arrayBbox.push(this.bbox)
      if(this.deltaArray[0] < 0 && tFlag == true){
        tFlag = false
        this.zoomIn(this.arrayTx, this.arrayTy, this.arrayK, this.svg, this.zooms)
        console.log("zoomin")
        clearTimeout(tTime)
        if(this.ArrayTimeStamp[this.ArrayTimeStamp.length-1]-this.ArrayTimeStamp[this.ArrayTimeStamp.length-5] > 1000){
          const newData = {'name' : 'G', 'id' : 'A5', 'x' : 139, 'y' : 276}
          this.node.push(newData)
          d3.selectAll('circle')
             .remove()

          this.minimapScatter = this.miniMap
            .selectAll('g')
            .data(this.node)
            .join('g')
            .append('circle')
            .attr('r', 10)
          // this.newTick
          // this.newSimulation
          let startTime = Date.now()
          let endTime = startTime + 1000
          this.newTick = ()=>{
            if(Date.now() < endTime){
                return this.minimapScatter
                  .attr('cx', (d)=>{ 
                    return d.x
                  })
                  .attr('cy', (d)=> {
                    return d.y
                  })
                  .on("click", (d)=>{
                    console.log("hi", d.target)
                  })
            } else {
                this.newSimulation.stop()
            }     
          }
          this.newSimulation = d3.forceSimulation(this.node)
            .force('charge', d3.forceManyBody().strength(30))
            .force('center', d3.forceCenter(this.brushX, this.brushY))
            .force('collision', d3.forceCollide().radius(11))
            .on('tick', this.newTick)
          
          this.scatter = this.svgMap
            .selectAll('g')
            .data(this.node)
            .join('g')
            .append('circle')
            .attr("r", 10)
            .attr('cx', (d)=>{ 
                  return d.x
                })
                .attr('cy', (d)=> {
                  return d.y
                })
                .on("click", (d)=>{
                  console.log("hi", d.target)
                })

          this.svg.call(
          this.zooms.transform, 
          d3.zoomIdentity.translate(-this.arrayBbox[this.i].x * this.height/this.arrayBbox[this.i].height, 
            -this.arrayBbox[this.i].y * this.height/this.arrayBbox[this.i].height)
            .scale(this.width/this.arrayBbox[this.i].height))
          

          this.i = this.i + 1
          console.log("time to reset")
          tFlag = true
          this.deltaArray = []
        }
      }


      
      else if(this.deltaArray[0] > 0 && tFlag == true){
        tFlag = false
        this.zoomOut(this.arrayTx, this.arrayTy, this.arrayK, this.svg, this.zooms)
        console.log("zoomout")
        if(this.ArrayTimeStamp[this.ArrayTimeStamp.length-1]-this.ArrayTimeStamp[this.ArrayTimeStamp.length-5] > 1000){
           this.svg.call(
            this.zooms.transform, 
            d3.zoomIdentity.translate(-this.arrayBbox[this.i].x * this.height/this.arrayBbox[this.i].height, 
            -this.arrayBbox[this.i].y * this.height/this.arrayBbox[this.i].height)
            .scale(this.width/this.arrayBbox[this.i].height))
          console.log("time to reset")
          tFlag = true
          this.deltaArray = []
        }
      }
      else if(this.deltaArray[0] == null && tFlag == true){
        tFlag = false
        this.panning(this.arrayTx, this.arrayTy, this.arrayK, this.svg, this.zooms)
        console.log("panning")
        if(this.ArrayTimeStamp[this.ArrayTimeStamp.length-1]-this.ArrayTimeStamp[this.ArrayTimeStamp.length-5] > 1000){
          this.svg.call(
            this.zooms.transform, 
            d3.zoomIdentity.translate(-this.arrayBbox[this.i].x * this.height/this.arrayBbox[this.i].height, 
            -this.arrayBbox[this.i].y * this.height/this.arrayBbox[this.i].height)
            .scale(this.width/this.arrayBbox[this.i].height))
          console.log("time to reset")
          tFlag = true
          this.deltaArray = []
        }
      }
    }
  },



  mounted() {
    this.svg = d3.select('#app')
      .append('svg')
      .attr('width', 500)
      .attr('height', 500)
    this.svgmini = d3.select('#app')
      .append('svg')
      .attr('width', 500)
      .attr('height', 500)
    this.svgMap = this.svg
      .append('svg')
      .attr('width', this.width)
      .attr('height', this.height)
      .attr('class', 'bbox')
    this.miniMap = this.svgmini
      .append('svg')
      .attr('width', this.width)
      .attr('height', this.height)
      .attr('class', 'miniBbox')
    //circle upating function by force
    
    let startTime = Date.now()
    let endTime = startTime + 1000

    const ticked = ()=>{
      if(Date.now() < endTime){
        return this.scatter
        .attr('cx', (d)=>{ 
          return d.x
        })
        .attr('cy', (d)=> {
          return d.y
        })
        .on("click", (d)=>{
          console.log("hi", d.target)
        })
      } else {
        this.simulation.stop()
      }     
    }
    
    const miniMapTicked = ()=>{ // eslint-disable-line no-unused-vars
      if(Date.now() < endTime){
        return this.minimapScatter
        .attr('cx', (d)=>{ 
          return d.x
        })
        .attr('cy', (d)=> {
          return d.y
        })
        .on("click", (d)=>{
          console.log("hi", d.target)
        })
      } else {
        this.miniSimulation.stop()
      }
    }
    //circle upating function by force

    //circle assign
    this.scatter = this.svgMap
      .selectAll('g')
      .data(this.node)
      .join('g')
      .append('circle')
      .attr("r", 10)
      .attr("class", (d)=>{
        return d.name
      })
      .attr("id", (d)=>{
        return d.id
      })

    this.minimapScatter = this.miniMap // eslint-disable-line no-unused-vars
      .selectAll('g')
      .data(this.node)
      .join('g')
      .append('circle')
      .attr("r", 10)
    //circle assign

    //force simulation
    this.simulation = d3.forceSimulation(this.node) // eslint-disable-line no-unused-vars
      .force('charge', d3.forceManyBody().strength(90))
      .force('center', d3.forceCenter(this.width / 2, this.height / 2))
      .force('collision', d3.forceCollide().radius(15))
      .on('tick', ticked)

    this.miniSimulation =  d3.forceSimulation(this.node) // eslint-disable-line no-unused-vars
      .force('charge', d3.forceManyBody().strength(90))
      .force('center', d3.forceCenter(this.width / 2, this.height / 2))
      .force('collision', d3.forceCollide().radius(15))
      .on('tick', miniMapTicked)
    //force simulation

    const svgBrush = this.miniMap
      .append('g')
    
    const onZoom = (event)=>{
      if ((event.sourceEvent && event.sourceEvent.type === "brush")) 
        return null

      this.k = event.transform.k // eslint-disable-line no-unused-vars
      this.tx = event.transform.x // eslint-disable-line no-unused-vars
      this.ty = event.transform.y // eslint-disable-line no-unused-vars
      console.log(this.k, this.tx, this.ty)
      this.deltaY = event.sourceEvent.deltaY
      this.deltaArray.push(this.deltaY)
      this.arrayK.push(this.k)
      this.arrayTx.push(this.tx)
      this.arrayTy.push(this.ty)
      this.timeStamp=event.sourceEvent.timeStamp
      this.ArrayTimeStamp.push(this.timeStamp)
      this.svgMap.attr('transform', event.transform)
      this.scatter.attr('transform', event.transform)
      const scaleX = (k)=>{ // eslint-disable-line no-unused-vars
        return d3.scaleLinear([0,this.width],[0,this.width * k])
      }
      const scaleY = (k)=>{ // eslint-disable-line no-unused-vars
        return d3.scaleLinear([0,this.height],[0,this.height * k])
      }
      this.brush.move(svgBrush, [
        [scaleX(this.k).invert(-this.tx), scaleY(this.k).invert(-this.ty)],
        [scaleX(this.k).invert(-this.tx + this.width), scaleY(this.k).invert(-this.ty + this.height)],
      ])
    }
        
    this.zooms = d3.zoom()
      .on('zoom start', onZoom)

    
    const onBrush = (event)=>{
      if (event.sourceEvent && event.sourceEvent.type === "zoom") 
        return null;
      if (Array.isArray(event.selection)){
        this.brushX = (event.selection[0][0] + event.selection[1][0])/2
        this.brushY = (event.selection[0][1] + event.selection[1][1])/2
        this.scatter.classed("selected", (d)=>{ // eslint-disable-line no-unused-vars
          return this.isBrushed(event.selection, d.x, d.y)
        })
        this.scatter.classed("inbox", (d)=>{ // eslint-disable-line no-unused-vars
          return !this.isBrushed(event.selection, d.x, d.y)
        })
      }
    }
  
    this.brush = d3.brush()
      .extent([[0,0], [this.width, this.height]])
      .on("brush", onBrush)

    this.svg.call(this.zooms)
      .on("dblclick.zoom", null)
      

    svgBrush.call(this.brush)
    this.brush.move(svgBrush, [
      [0,0],
      [this.width * this.k, this.height * this.k]
    ])
    this.svgMap.selectAll('.handle').remove()
    this.svgMap.selectAll('.overlay').remove()
    this.svgmini.selectAll('rect').remove()


    
   
  },

 
}
</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
circle {
  fill: cadetblue;
}
.selected {
  fill: red;
  opacity: 1;
}
.inbox {
  fill: rgb(0, 183, 255);
  opacity: 1;
}

</style>
